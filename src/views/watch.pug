//- [Pug 문법] extends를 통해 html 레이아웃을 base.pug 코드로부터 상속받음
//- [Pug 문법] block을 통해 base.pug 레이아웃 기반으로 html 내용 재구성

extends base.pug

block content
  //- h1 watching pug video #{idVideo};
  
  //- ??? mvp.css 패딩 마진 속성 문제로 추정


  //- [ Web API 문법 & Javascript 문법 ] 자체제작한 controls 들도 fullscreen 모드 적용에 반영시키기 위해 video 요소와 controls 들을 div#videoContainer 태그로 묶음
  //- [ Web API 문법 ] videoPlayer.js 내의 handleEnded 함수가 비디오id 값을 얻을 수 있는 통로가 없는 상황이므로 템플릿을 렌더링 하는 watch.pug 내에 비디오에 대한 정보를 남기도록 data-작명(즉, div#videoContainer(data-videoid=video._id) 및 dataset 문법 조합을 적용하여 백엔드 거치지 않고도 프론트엔드단에서 비디오id 값을 얻을 수 있도록 함
  div#videoContainer(data-videoid=video._id)
    //- [ Multer 라이브러리 연계 문법 ] videoRouter.js 의 videoRouter.get('/:id([0-9a-f]{24})', watch); 라우팅 코드를 거쳐 videoController.js 의 watch 함수에서 await Video.findById(idVideo) 쿼리문의 결과값을 video 에 담아 return res.render('watch', { pageTitle: video.title, video}); 코드를 통해 Pug 템플릿으로 전달함
    //- [ Multer 라이브러리 연계 문법 & Express 문법 ★★★] video(src=video.fileUrl) 로 작성하면 상대경로(즉, /videos/uploads/videos/랜덤파일명) 처리되므로 video(src='/' + video.fileUrl) 로 작성하여 절대경로 (즉, /uploads/videos/랜덤파일명) 처리되도록 해야함(Multer 를 통한 파일 저장경로가 video/uploads/videos 가 아니라 uploads/videos 이기 때문)
    video(src='/' + video.fileUrl, )

    //- [ Web API 문법 & Javascript 문법 ] mousemove 및 mouseleave 이벤트에 따라 controls 보이거나 사라지도록 조작하기 위해 div#videoControls 라고 식별값 부여함
    //- div#videoControls
    //-   button#playBtn Play
    //-   button#muteBtn Mute 
    //-   div
    //-     span#currentTime 00:00
    //-     span /
    //-     sapn#totalTime 00:00
    div#videoControls.videoControls
      div.videoControls__play
        span#playBtn.videoControls__playBtn
          i.fas.fa-play
        div.videoControls__time
          span#currentTime 00:00
          span  / 
          span#totalTime 00:00
        
      //- [ Pug 문법 + Javascript 문법 ] 타임라인바의 영상 길이 값에 해당하는 input 의 max 속성은 videoPlayer.js 의 handleLoadedmetadata 이벤트에서 감지한 video.duration 값으로 적용함
      //- input(type='range', step='1', value='0' min='0')#timeline
      input(type="range",step="1", value="0", min="0")#timeline.videoControls__timeline

      //- [ SCSS 문법 & CSS 문법 ] src/client/scss/forms.scss 내에서 input 태그에 관한 속성 적용 범위를 input:not(input[type="range"]), 어쩌구 { 생략 } 형태로 수정함
      //- [ SCSS 문법 & CSS 문법 ] input:not() 문법 통해서 input[type="range"] 인 input 태그는 적용 배제하고 input[type="submit"] 인 input 태그에 한하여 적용시킴
      //- [ Pug 문법 + Javascript 문법 ] range 타입의 input 태그 브라우저단 초기값을 value='0.5' 로 지정함
      //- input(type='range', step='0.1', value='0.5' min='0', max='1')#volumeRange
      div.videoControls__volume
        input(type="range",step="0.1", value=0.5, min="0", max="1")#volumeRange
        span#muteBtn
          i.fas.fa-volume-up

      div 
        //- button#fullScreen Enter Full Screen
        span#fullScreen
          i.fas.fa-expand


  //- [ Pug 문법 + JavaScript문법 ] 삼항연산자를 활용해 영문법 단수view / 복수views 단위 구분함
            //- h3 #{video.views} #{video.views < 2 ? "view" : "views"}

  //- [ Mongoose 연계 문법 ] 기능02: (video.js 코드부터 참조요) 영상 재생 페이지에 비디오 업로더 이름 표기하는 기능
  //- [ Mongo DB & Mongoose 연계 문법 ★★★] 이처럼 Video 모델과 User 모델을 연결하는 스키마와 controller 를 만들려면 우선적으로 mongo 콘솔 명령어 db.users.remove({}) 와 db.videos.remove({}) 를 실행해 두 개의 collection (즉, users 와 videos) 를 모두 삭제(즉, 초기화) 해야 함
  //- [ Mongoose 연계 문법 ] Video 모델 스키마에 기반해 저장된 owner 의 _id 값(즉, postJoin 함수 내의 await User.create({}) 쿼리문에 의해 Mongo DB 자동 부여한 _id 값) 을 기반으로 videoController.js 의 watch 함수 내에서 해당 영상 업로드 한 사용자에 대한 정보를 const videoOwner = await User.findById(video.owner); 쿼리문으로 videoOwner 에 담은 후 Pug 템플릿으로 전달함
  div.video__data
    p.video__title=video.title

    p.video__description=video.description
    
    //- small Uploaded by #{videoOwner.name}
    small.video__owner Uploaded by 
      //- [ Mongoose 문법 ] videoController.js 의 watch 함수 내의 const video = await Video.findById(idVideo) 코드였을 때는 video.name 에 사용자의 이름이 담기는 형태였는데 .populate('owner') 속성을 추가로 연결하면 owner 에 user 모델 스키마에 기반한 DB 값(Object 형태)이 담기게 됨
      //- [ Pug 문법 ] a(href=`/users/${video.owner._id}`) 태그를 통해 소유자 프로필 페이지로 링크 연결함
      a(href=`/users/${video.owner._id}`)=video.owner.name
    
              //- small=video.createdAt
    small.video__createdAt=new Date(video.createdAt).toLocaleDateString("ko-kr", {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'})

  //- [ Mongoose 연계 문법 ] 기능01: (video.js 코드부터 참조요) 영상 재생 페이지에서 비디오 업로더 당사자가 아니면 Edit Video, Delete Video 접근하지 못하도록 버튼 숨김 처리하는 기능
  //- [ Mongo DB & Mongoose 연계 문법 ★★★] 이처럼 Video 모델과 User 모델을 연결하는 스키마와 controller 를 만들려면 우선적으로 mongo 콘솔 명령어 db.users.remove({}) 와 db.videos.remove({}) 를 실행해 두 개의 collection (즉, users 와 videos) 를 모두 삭제(즉, 초기화) 해야 함
  //- [ Mongoose & Express-session 연계 문법 ] 영상의 owner 의 _id 값과 로그인 한 사용자의 _id 값이 일치하면 로그인 한 사용자를 영상의 원소유자(owner)로 판별함
  //- [ Mongoose & Express-session 연계 문법 ] video.owner 타입은 ObjectId 인데 반해 loggedInUserDb._id 타입은 String 이므로 양단에 String() 처리하여 타입 형식을 동일하게 맞춰야 함
  
  //- if String(video.owner) === String(loggedInUserDb._id)
  //- [ Mongoose 문법 ] videoController.js 의 watch 함수 내의 const video = await Video.findById(idVideo) 코드였을 때는 video.owner 에 _id 값(String 형태)만 담기는 형태였는데 .populate('owner') 속성을 추가로 연결하면 owner 에 user 모델 스키마에 기반한 DB 값(Object 형태)이 담기게 됨
  if String(video.owner._id) === String(loggedInUserDb._id)
    //- br
    //- small=video.owner
    //- br
    //- small=loggedInUserDb._id

    //- videoRouter에서 edit 페이지 라우트 경로는 동영상 개별 id의 하위 경로로 설정했었음
    //- absolute & relative URL 개념: 경로 설정시 앞머리에 슬래쉬(/) 표기 여부에 따라 절대주소 또는 상대주소 성격을 부여할 수 있음  
    a(href=`${video.id}/edit`) Edit Video &rarr;
    br
    a(href=`${video.id}/delete`) Delete Video &rarr;

  //- [ Express 문법 ] 오류 내용 - Uncaught TypeError: Cannot read properties of null (reading 'querySelector')
  //- [ Express 문법 ] 오류 원인 - watch.pug 단에서 if loggedin 조건문 값이 false 인 경우(즉, 비로그인 상태) ID속성인 #commentForm 속성이 브라우저단에 나타나지 않도록 설정한 상황에서 commentSection.js 에서 .querySelector('#commentForm'); 동작하여 오류 발생
  if loggedIn
    div.video__comments
      form.video__comment-form#commentForm
        textarea(cols='40', rows='4', placeholder='Write a nice comment..')
        button.social__btn Add Comment

  div.video__comments
    ul
      //- [ Javascript 문법 ] reverse() 통해 배열 순서를 반전함 (즉, 최신 댓글순 상위 정렬)
      each comment in video.comments.reverse()
        //- [ MongoDB & Express-session 문법 ] 댓글 작성자(즉, comment.owner) 값과 로그인한 사용자 식별ID (즉, middlewares.js 의 res.locals.loggedInUserDb = req.session.userDbResult || {}; 코드에 기반한 loggedInUserdb._id 값) 값을 확인하는 용도로 브라우저단에 출력해봄
        //- span=`comment.owner: ${comment.owner}`
        //- br
        //- span=`loggedInUserDb._id: ${loggedInUserDb._id}`
        //- br
        //- [ Javascript ] data-id=comment._id 속성 통해 사용자가 댓글 삭제하는 DELETE 요청시 댓글ID 식별 가능함
        li.video__comment(data-id=comment._id)
          
          //- [ 시큐어 보안 코딩 & Express-session 문법 ] if comment.owner == loggedInUserDb._id 통해, 로그인한 사용자(즉, loggedInUserDb._id)가 댓글 작성자(즉, comment.owner)로 확인되면, 본인이 작성한 댓글에 한해 삭제할 수 있는 버튼 보여줌
          if comment.owner == loggedInUserDb._id
            span.video__comment-deleteBtn ❌
          i.fas.fa-comment
          span #{comment.text}

//- [ WebPack 문법 & Pug 문법 ] ★★★★★ webpack.config.js 에서 bundle 처리된 코드 결과물이 브라우저단에 반영된 상태는 아니므로 pug페이지들에 html 기본 구성 골격을 리턴해 주는 extends base.pug 파일 내에서 block 태그(예- block scripts)를 만들어 각 pug페이지별 용도에 맞게 script(src="") 형식의 코드를 통해 목적에 맞는 bundle 처리된 코드를 pug 페이지 내로 불러와야 함
//- 본 구간에서 들여쓰기 하면 본 위치 상단에 적힌 코드인 block content 에 종속되는 block scripts 가 되어버리므로 들여쓰기 없어야 함
//- [Pug 문법] block을 통해 base.pug 레이아웃 기반으로 html 내용 재구성
block scripts
  //- [ WebPack & 시큐어 보안 코딩 & Express 라이브러리 문법 ] webpack.config.js 설정을 마쳤다면 server.js 에서 express.static('노출시키려는 폴더명') 코드로 Express를 통해 assets 폴더 공개하기 (즉, 기본적으로 폴더들은 비공개이므로)
  //- [ WebPack & 시큐어 보안 코딩 & Express 라이브러리 문법 ] /static/어쩌구 페이지 주소로 접근 요청할 경우 server.js 에서 설정해 놓은 assets app.use("/static", express.static("assets")); 라우터에 의해 assets 폴더가 공개되어 있으므로 그 폴더로 접근시켜줌
  script(src="/static/js/videoPlayer.js")

  //- [ Pug 문법 ] watch.pug 에 commentSection.js 불러오기
  //- [ Pug & Javascript 문법 ] if loggedIn 조건문 통해 로그인 상태에서만 watch.pug 단의 댓글 작성용 form 이 화면에 표시되도록 설정함
  //- [ Javascript 문법 ] 비로그인 상태면 if loggedIn 조건문 충족되지 않는 상황에서 script(src="/static/js/commentSection.js") 통해 Pug 단의 댓글 작성용 form 에 대해 DOM 기반으로 처리하려다 보니 오류 메시지 발생함
  //- [ Javascript 문법 ] Uncaught TypeError: Cannot read properties of null (reading 'querySelector')
  //- [ Javascript 문법 ] Uncaught TypeError: Cannot read properties of null (reading 'addEventListener')
  //- [ Javascript 문법 ] 로그인 여부를 기준으로 form 에 대해 Pug 단과 Javascript 단에서 동작 처리를 달리할 수 있도록 코드 구성			
  //- if loggedIn //- [ form 취급 방안A ] 로그인 사용자에 한해 Pug 단에서 form 에 대한 DOM 다루는 commentSection.js 파일 참조 허용
  //- [ form 취급 방안B ] 를 채택함 / [ form 취급 방안A ] 을 미채택함
  script(src="/static/js/commentSection.js")