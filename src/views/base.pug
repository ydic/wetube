//- extends base.pug를 명시한 pug파일들에 html 기본 구성 골격을 리턴해줌

//- [ Pug 문법 & express-flash 문법 ] 예시) include mixins/message 경로와 같이 자체 제작 및 작명한 mixin 모델인 messageMixin 모델을 Pug 템플릿 단에서 include mixins/message 코드 상단 기입 후   +messageMixin(파라미터명) 형태의 Pug 문법으로 불러와 재사용함
include mixins/message

doctype html 
//- html(lang="en")
html(lang="ko")
  head 
    //- Controller 파트의 res.render 파라미터 값으로 {pageTitle : 'Home'} 오브젝트를 코딩해 놓았기에 pug파일의 #{pageTitle} 자리에 값이 담겨지게 됨
    //- [Pug 문법] #{} 문법 사용하면 한 html 태그에 대해 variable를 다른 text (예: | WeTube)와 섞어서 쓸 수 있음
          /* title #{pageTitle} | WeTube */
    //- [ Express-session 라이브러리 연계 문법 ] Pug 템플릿에서 req.session.loggedIn 형태로는 session에 접근 불가. 별도의 전용 문법 없이 locals 활용해 접근 가능.
    //- [ Express-session 라이브러리 연계 문법 ] middlewares.js의 localsMiddleware 함수 내의 res.locals.siteNameByLocals = 'Wetube'; 코드 값을 base.pug에서 별도의 전용 문법 없이 #{siteNameByLocals} 이라는 이름으로 접근함
    title #{pageTitle} | #{siteNameByLocals}

    //- (용어 약자 풀이 주의: MVP 디자인 패턴이 아님. Model View Presenter) Minimum Viable Product (MVP CSS) 
    //- Mobile friendly / Works out of the box / Easy to customize / Only semantic HTML / No class names / Perfect for an MVP
    //- [ CSS - fontawesome ] #10.0 제대로 된 CSS 구성을 시작할 것이므로 base.pug 에서 fontawesome CDN 경로를 첨부하고 임시로 사용해왔던 MVP CSS 참조를 중단함
    //- [ CSS - fontawesome ] /client/scss/ 폴더 내에 config 폴더(_variables.scss, _reset.scss 등) / components 폴더(header, footer 등) / screens 폴더(home, search 등) 으로 폴더 구분하여 CSS 제작
        //- link(rel="stylesheet" href="https://unpkg.com/mvp.css")
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css")
    
    //- [ mini-css-extract-plugin 문법 & WebPack 문법 & Pug 문법 ] webpack.config.js 에서의 configuration 설정으로 인해 변환 처리된 CSS 파일을 mini-css-extract-plugin 통해서 /assets/css/styles.css 경로에 위치하도록 만든 후 해당 CSS 를 브라우저단의 Pug 템플릿에 연결시킴
    //- [ mini-css-extract-plugin 문법 & WebPack 문법 & Pug 문법 ] client 폴더의 파일은 WebPack 에 의해서만 로딩 가능함 / assets 폴더의 파일은 사용자, Pug, 브라우저에 의해서만 로딩 가능함
    link(rel="stylesheet" href="/static/css/styles.css")

  body

    //- [ express-flash 문법 ] Access the messages in your views via locals.messages (.jade in this case):
    //- [ Pug 문법 & express-flash 문법 ] express-flash 통해 템플릿(즉, Pug 의 views) 단에서 사용 가능한 messages locals 만들어짐
    //- [ Pug 문법 & express-flash 문법 ] mixin (즉, message.pug) 기법과 SCSS (즉, styles.scss) 통해 서버단에서 생성한 req.flash() 데이터가 템플릿단에서 알림 형태로 시각화 표시되도록 만듦
    if messages.error
      //- span= messages.error
      +messageMixin('error', messages.error)
    if messages.info
      //- span= messages.info
      +messageMixin('info', messages.info)
    if messages.success
      //- span= messages.success
      +messageMixin('success', messages.success)

    //- [Pug 문법] include를 통해 모든 pug 페이지(extends)에 동일한 header 태그를 생성함
    //- [ CSS & saas-loader ] Pug 전용 /views 폴더에서 mixins 폴더나 partials 폴더 내에 생성한 파일명과 동일한 이름으로 SCSS 쪽에도 (즉, /client/scss/components/ 쪽에도) 파일을 만들어 놓은 후에 CSS 작업요 
    include partials/header
    
    main
      block content

      //- [Pug 문법] include를 통해 모든 pug 페이지(extends)에 동일한 footer 태그를 생성함
      //- [ CSS & /client/scss/ ] Pug 전용 /views 폴더에서 mixins 폴더나 partials 폴더 내에 생성한 파일명과 동일한 이름으로 SCSS 쪽에도 (즉, /client/scss/components/ 쪽에도) 파일을 만들어 놓은 후에 CSS 작업요 
      include partials/footer.pug
      
          //- [ WebPack & Pug 문법 ] base.pug 가 bundle 처리된 /assets/js/main.js 파일을 불러올 수 있도록 연결해야 함 script(src='/static/js/main.js')
          //- script(src='/static/js/main.js')

    //- [ WebPack & 시큐어 보안 코딩 & Express 라이브러리 문법 ] webpack.config.js 설정을 마쳤다면 server.js 에서 express.static('노출시키려는 폴더명') 코드로(즉, app.use("/static", express.static("assets")); 코드) Express를 통해 assets 폴더 공개하기 (즉, 기본적으로 폴더들은 비공개이므로)
    //- [ WebPack & 시큐어 보안 코딩 & Express 라이브러리 문법 ] base.pug 내의 script(src="static/js/main.js") 코드 통해 main.js 내의 import regeneratorRuntime from "regenerator-runtime"; 코드가 모든 pug 파일에 기본 반영되어 프론트엔드단에서 (즉, recorder.js 파일 내의) async / await 동작하도록 만듦(? 그때는 필요했고 지금은 없어도 된다?)
    //- [ WebPack & 시큐어 보안 코딩 & Express 라이브러리 문법 ] webpack.config.js 내의 entry 에 main: "./src/client/js/main.js", 코드 주입한 후, path: path.resolve(__dirname, "assets") 코드 통해 assets 폴더 내에 번들된 output 결과물이 생성되고, app.use("/static", express.static("assets")); 코드 통해 assets 폴더를 /static/어쩌구 주소값 형태로 라우트하여 접근하도록 설정했음
    //- 재확인요 --- ★★★ --- main.js 파일을 base.pug 내의 block scripts 하위값으로 호출하지 않고 동일한 계층 레벨로 코드를 작성하여 모든 pug 파일에 기본 반영됨(즉, block scripts 하위값으로 main.js 호출하는 코드를 적으면, 다른 pug 파일에서 extends base.pug 한 이후에 block scripts 형식으로 명기한 pug 파일들에 한해서만 main.js 호출이 유효하기 때문??? )
    //- 단지, 모든 pug 단 파일에 regenerator-runtime 기본 적용하려는 차원으로 base.pug 상에 main.js 호출?
    //- script(src="/static/js/main.js")

    //- [ WebPack 문법 ] ★★★★★ entry 진입점 항목을 다원화 하여 output 항목의 설정대로 bundle 처리되는 코드 파일을 다원화 하는 이유는 예- videoPlayer 기능에 관한 코드는 검색 페이지 화면에서 로드 될 필요가 없고 영상 시청 페이지 화면에서만 로드되면 되기 때문(즉, 비디오 페이지에 갔을 때만 비디오 플레이어 코드를 로드 시킴)
    //- [ WebPack 문법 & Pug 문법 ] ★★★★★ webpack.config.js 에서 bundle 처리된 코드 결과물이 브라우저단에 반영된 상태는 아니므로 pug페이지들에 html 기본 구성 골격을 리턴해 주는 extends base.pug 파일 내에서 block 태그(예- block scripts)를 만들어 각 pug페이지별 용도에 맞게 script(src="") 형식의 코드를 통해 목적에 맞는 bundle 처리된 코드를 pug 페이지 내로 불러와야 함
    //- [Pug 문법] block을 통해 base.pug 레이아웃 기반으로 html 내용 재구성
    block scripts