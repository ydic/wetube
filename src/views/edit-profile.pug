//- [Pug 문법] extends를 통해 html 레이아웃을 base.pug 코드로부터 상속받음
//- [Pug 문법] block을 통해 base.pug 레이아웃 기반으로 html 내용 재구성


extends base.pug

block content 

  if errorMessage
    span=errorMessage

  //- [ Express-session 라이브러리 연계 문법 ] Pug 템플릿에서 req.session.loggedIn 형태로는 session에 접근 불가. 별도의 전용 문법 없이 locals 활용해 접근 가능.
  //- [ Express-session 라이브러리 연계 문법 ] middlewares.js 의 localMiddleware 함수 내의 res.locals.loggedInUserDb = req.session.userDbResult || {}; 코드를 통해 로그인(wetube DB 자체 로그인(즉, userController.js 의 postLogin 함수 내) / Github OAuth 로그인(즉, userController.js 의 finishGithubLogin 함수 내))한 사용자에 대한 모든 정보가 담겨있는 세션 정보를 locals 문법을 활용해 Pug 템플릿(즉, 브라우저단)에서 loggedInUserDb 라는 오브젝트로 받아와 활용함
  //- img 태그 소스 경로를 src=loggedInUserDb.avatarUrl 로 지정하면 userRouter.js 코드에 기반해 상대 경로로 처리됨 http://localhost:4000/users/uploads/이미지랜덤파일명
  //- img 태그 소스 경로를 '/' + loggedInUserDb.avatarUrl 로 지정하면 절대 경로로 처리됨
  //- ??? 원인 확인요 : 절대 경로로 처리되었으나 브라우저 개발자도구(F12)에서 코드를 보면 src="/uploads\ebd7631d4a8ae1c6be864e8396ff79c5" 와 같이 역슬래시로 표기되어 있는데, 이미지를 정상적으로 불러와짐
  //- 자체보완완료 --- ★★★ --- User.js 모델 내의 socialOnly : false 인 사용자는 avatarUrl : 항목에 담기는 값의 총 글자수가 48자(예- uploads\avatars\89a7577a465d529796065b886a8cd7ff ) 로 고정되어 있어서 48자 여부(사이트직접가입계정/GitHub계정)에 따라 아바타이미지 불러오는 주소값을 다르게 식별하도록 처리함
  //- 자체보완완료 --- ★★★ --- 기반코드1 middlewares.js 내의 export const avatarUpload = multer({ dest: 'uploads/avatars/', limits: { fileSize: 3000000, }, });
  //- 자체보완완료 --- ★★★ --- 기반코드2 edit-profile.pug 내의 label(for='avatarSection') Avatar 와 input(id='avatarSection', name='avatarByMulter', type='file', accept='image/*')
  if loggedInUserDb.avatarUrl.length == 48
    img(src='/' + loggedInUserDb.avatarUrl, width='100', height='100')
  else
    img(src=loggedInUserDb.avatarUrl, width='100', height='100')

  //- [ Pug 라이브러리 문법 ] POST 요청으로 사용자 입력값을 전송할 때 form(method='POST') 형식 내에 action 속성을 명시하지 않을 경우, 같은 URL 주소로 POST 요청을 보내려는 것을 브라우저는 알고 있음
  //- join.pug 의 form(method='POST') 이하 코드 부문 일부 재활용
  //- 본 코드 부문에서는 password 변경 작업에 대한 코드는 없음. password 보유 사용자(wetube ID/PW 가입), 미보유 사용자가 있기에 별도로 페이지를 만들어 처리

  //- submit 클릭시 데이터를 똑같은 url에 보내고 싶기 때문에 form(action="") 속성 설정 안하고, method를 POST로 설정함
  //- form(method="GET") 요청은 구글과 같은 검색엔진에서 활용
  //- form(method="POST") 요청은 웹사이트 로그인 / DB에 들어있는 값을 바꾸는 data를 보내거나 file을 보낼 때 사용

  //- [ 코드 연계성 ] edit-profile.pug 에서 user가 POST 요청을 보내면 userController.js 의 postEdit 함수에서 body 값을 받아서 읽어들일 수 있게 됨                  

  //- [ Multer 라이브러리 문법 ] Multer는 파일 업로드를 위해 사용되는 multipart/form-data 를 다루기 위한 node.js 의 미들웨어 입니다. 효율성을 최대화 하기 위해 busboy 를 기반으로 하고 있습니다.
  //- [ Multer 라이브러리 문법 ] 주: Multer는 multipart (multipart/form-data)가 아닌 폼에서는 동작하지 않습니다.
  //- [ Multer 라이브러리 문법 ] 업로드 하는 파일의 이름을 랜덤파일명으로 생성해서 처리함(장점: 서로 다른 두 사용자가 파일명이 abc로 동일한 이미지를 업로드 하더라도 덮어씌워지는 사태 방지함)
  //- [ Multer 라이브러리 문법 ] pug 템플릿에서 input 태그를 통해 업로드 시도한 파일은 middlewares.js 의 export const uploadFiles = multer({ dest: 'uploads/' }) 코드를 통해 저장되는 경로를 지정함
  //- [ Multer 라이브러리 문법 ] userRouter.js 에서는 edit-profile.pug 템플릿에서 보낸 POST 요청에 대해 postEdit 함수 기재 이전에 Multer (즉, uploadFiles.single('avatar') 라는 코드)를 먼저 기재하여 Multer 코드 실행 후 그 다음 controller 인 postEdit 에 업로드한 파일의 정보를 전달함
  //- [ Multer 라이브러리 문법 ★★★ ] 즉, userRouter.js 에서 사용한 uploadFiles.single('avatar') 코드는 edit-profile.pug 의 form(method='POST', enctype='multipart/form-data') 입력폼 내의 avatar 라는 이름의 input(type='file') 값에 단일 파일(즉, single)을 담아 uploads 폴더 이하에 업로드하고 req.file 을 추가함
  //- [ Multer 라이브러리 문법 ] uploads 폴더 이하에 업로드하고 Multer 가 업로드 된 파일에 개발자가 접근할 수 있도록 자체 제공하는 req.file 라는 코드를 userController.js 에서 활용함
  //- [ Multer 라이브러리 연계 문법 ] req.file 값을 userController.js 의 postEdit 함수 내의 findByIdAndUpdate 쿼리 함수에서 받아와 삼항연산 코드로 사용자가 avatar 이미지 업로드 하는 여부에 따라 이미지 소스경로를 달리 처리함 avatarUrl: file ? file.path : avatarUrl
  //- [ Multer 라이브러리 연계 문법 ] 사용자가 edit-profile.pug 에서 avatar 파일을 업로드한다면 file.path 를 사용하고, 업로드하지 않았다면 현재 로그인한 사용자의 session 의 userDbResult 에 내장된 기존 avatarUrl 에 들어있는 이미지 값으로 유지함
  //- [ 시큐어 보안 코딩 & Express 라이브러리 문법 ] controller 단에 삼항연산 처리 코드까지 만들어 놓았지만 브라우저 입장에서는 /uploads/랜덤파일명 경로 접근이 지정되어 있지 않은 상태(즉, 404 Not Found)이므로 server.js 에서 express.static('노출시키려는 폴더명') 라는 코드를 통해 일명 static files serving 기능을 가동해 브라우저가 열람 가능한 페이지와 폴더를 지정해 놓는 것이 보안에 바람직함
  //- [ Mongo DB & Mongoose 라이브러리 문법 ] 코드 원칙: DB 에 파일 저장 금지 / 폴더(예- Amazon HDD)에만 파일 저장 / DB 에는 파일의 경로만 저장
  //- #8.8 클립 - 현 시점까지의 코드 내용에서는 업로드 업데이트 처리하는 서버 동작 방식이 엉터리임(즉, 기존 서버 환경을 종료하며 저장된 파일은 휘발되고 새로운 서버 환경으로 재시작)
  //- #8.8 클립 - 서버가 사라졌다 다시 돌아와도 파일을 그대로 있도록 실제 서버에 배포하기 전에 코드 개선 해야함
  
  //- [ Mongo DB & Mongoose 라이브러리 문법 ] 코드 원칙: DB 에 파일 저장 금지 / 폴더에만 파일 저장 / DB 에는 파일의 경로만 저장

                  //- form(method='POST')
  //- form(method='POST', enctype='multipart/form-data')
  //- #10.2 Styles Part Two 깃헙강의코드북붙했으니재확인요
  form(method="POST", enctype="multipart/form-data").edit-profile__form

    //- [ Pug 라이브러리 문법 ] 본 코드 페이지에서는 계정을 새로 생성하는 것이 아니라 기존 계정의 정보를 수정하는 것이므로 사용자의 현재 프로필을 form 형식에서 브라우저에 보여주어야 하므로 input(value= ) 속성으로 사용자 정보 값을 읽어와야 함
    //- [ 코드 연게성 ] userController.js의 postLogin 함수에서 socialOnly: false (즉, wetube ID/PW 방식 가입) 회원의 userDbResult 를 req.session.userDbResult = userDbResult; 형태로 1차 전달함
    //- [ 코드 연게성 ] 그것을 middleware.js 의 localsMiddleware 함수에서 res.locals.loggedInUserDb = req.session.userDbResult; 형태로 값을 2차 전달함
    //- [ 코드 연게성 ] 그것을 별도의 전용 문법 없이 locals 활용해(즉, locals는 본 프로젝트에서 설정한대로 자동적으로 src/views 경로로 import 되므로) Pug 단에서 loggedInUserDb 내의 값(즉, 기존에 저장되어 있는 입력값)을 input 태그의 value 속성에 불러와서 사용자에게 보여줌

    //- [ 리마인드 - servers.js 에서 express 호환 view engine 으로서의 pug 운용 환경설정 ] express 호환 템플리트가 있는 디렉토리
    //- [ 리마인드 - servers.js 에서 express 호환 view engine 으로서의 pug 운용 환경설정 ] package.json 파일이 있는 폴더 위치가 pug 템플릿 동작시 인식하는 cwd 기준점
    //- [ 리마인드 - servers.js 에서 express 호환 view engine 으로서의 pug 운용 환경설정 ] 따라서 초기 기본값으로 지정된 ./views 경로를 src/views 경로로 변경 (s자 빠진 view로 폴더명 생성시 오류발생함)

    //- [ HTML 문법 ] <label> 을 <input> 요소와 연관시키려면, <input> 에 id 속성을 넣어야합니다. 그런 다음 <label> 에 id 와 같은 값의 for 속성을 넣어야합니다. 
    //- [ HTML 문법 ] 또는, <label> 안에 <input> 을 중첩시킬 수 있습니다. 이 경우 연관이 암시적이므로 for 및 id속성이 필요없습니다.
    label(for='avatarSection') Avatar
    //- 저는 예전에 이런 폼을 만들어 파일 인풋에 모든 이미지를 허용했을 때 나중에 그 이미지 중 svg 포맷이 템플릿에서 정상적으로 출력 되지 않는 것을 봤어서 accept=".png, .jpg, .jpeg"로 설정하였습니다 :)
                    //- input(type='file', id='avatarSection', name='avatar', accept='.png, .jpg, .jpeg')    
    //- [ HTML 문법 ] input(name='ABC') 속성은 POST 요청이 발생됐을 때 userController.js 에서 그 값을 받아와 이용하기 위해서 속성 값들에 대한 명칭이 필요함
    //- [ HTML 문법 ] input(accept='image/*') 속성은 이미지 파일형식만 선택하도록 설정
    input(id='avatarSection', name='avatarByMulter', type='file', accept='image/*')

    input(value=loggedInUserDb.name, name='name', type='text', placeholder='Name', required)
    input(value=loggedInUserDb.email, name='email', type='email', placeholder='Email', required)
    input(value=loggedInUserDb.username, name='username', type='text', placeholder='Username', required)
    input(value=loggedInUserDb.location, name='location', type='text', placeholder='Location', required)

    input(type='submit', value='Update Profile')

    //- [ Github OAuth API 연계 문법 ] Github OAuth 방식으로 wetube DB 에 계정 만든 사용자는 Wetube DB 내에 비밀번호 값이 없으므로 비밀번호 변경 페이지 자체를 보여주지 말아야 함
    if !loggedInUserDb.socialOnly
      //- hr
      //- 절대URL(즉, /users/change-password)로 적어도 되는데 상대URL(즉, change-password) 사용하여 /users/ 이하 부분의 경로값만 바뀌게 함
      div.edit-profile__password
        a(href='change-password') Change Password &rarr;